--- .\ec2.tf ---

resource "aws_instance" "instancia_1" {
  ami           = "ami-04a81a99f5ec58529"  # Substituir por um AMI válido
  instance_type = "t2.micro"
  key_name      = "terraform-key"//chave ssh configura no console aws

  security_groups = [aws_security_group.elb_sg.name]
  depends_on = [aws_db_instance.meu_rds]

user_data = <<-EOF
                #!/bin/bash
                apt update
                apt install -y apache2 mysql-client php php-mysql libapache2-mod-php wget unzip

                # Baixar e configurar o WordPress
                wget https://wordpress.org/latest.zip
                unzip latest.zip
                mv wordpress/* /var/www/html/

                # Definir permissões
                chown -R www-data:www-data /var/www/html/
                chmod -R 755 /var/www/html/

                # Criar arquivo de configuração do WordPress
                cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php

                # Atualizar arquivo de configuração do WordPress com detalhes do banco de dados
                sed -i "s/database_name_here/${aws_db_instance.meu_rds.db_name}/" /var/www/html/wp-config.php
                sed -i "s/username_here/admin/" /var/www/html/wp-config.php
                sed -i "s/password_here/MinhaSenhaSegura123/" /var/www/html/wp-config.php
                sed -i "s/localhost/${aws_db_instance.meu_rds.address}/" /var/www/html/wp-config.php

                # Iniciar e habilitar Apache
                systemctl start apache2
                systemctl enable apache2
                EOF


  tags = {
    Name = "InstanciaWeb1"
  }
}


resource "aws_instance" "instancia_2" {
  ami           = "ami-04a81a99f5ec58529"  # Substituir por um AMI válido
  instance_type = "t2.micro"
  key_name      = "terraform-key"//chave ssh configura no console aws

  security_groups = [aws_security_group.elb_sg.name]
  depends_on = [aws_db_instance.meu_rds]

user_data = <<-EOF
                #!/bin/bash
                apt update
                apt install -y apache2 mysql-client php php-mysql libapache2-mod-php wget unzip

                # Baixar e configurar o WordPress
                wget https://wordpress.org/latest.zip
                unzip latest.zip
                mv wordpress/* /var/www/html/

                # Definir permissões
                chown -R www-data:www-data /var/www/html/
                chmod -R 755 /var/www/html/

                # Criar arquivo de configuração do WordPress
                cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php

                # Atualizar arquivo de configuração do WordPress com detalhes do banco de dados
                sed -i "s/database_name_here/${aws_db_instance.meu_rds.db_name}/" /var/www/html/wp-config.php
                sed -i "s/username_here/admin/" /var/www/html/wp-config.php
                sed -i "s/password_here/MinhaSenhaSegura123/" /var/www/html/wp-config.php
                sed -i "s/localhost/${aws_db_instance.meu_rds.address}/" /var/www/html/wp-config.php

                # Iniciar e habilitar Apache
                systemctl start apache2
                systemctl enable apache2
                EOF


  tags = {
    Name = "InstanciaWeb1"
  }
}


--- .\elb.tf ---

resource "aws_elb" "web" {
  name               = "elb-marcos-eduardo"
  availability_zones = ["us-east-1a", "us-east-1b"]

  listener {
    instance_port     = 80
    instance_protocol = "HTTP"
    lb_port           = 80
    lb_protocol       = "HTTP"
  }

  health_check {
    target              = "HTTP:80/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }

  instances = [aws_instance.instancia_1.id, aws_instance.instancia_2.id]
}


--- .\output.tf ---


output "final_snapshot_id" {
  value = aws_db_instance.meu_rds.final_snapshot_identifier
}

output "load_balance_dns_name" {
  value = aws_elb.web.dns_name
}

--- .\provider.tf ---

provider "aws" {
  region = "us-east-1"//Virginia
  profile = "TF001"//Perfil criado localmente com as credenciais    
}

--- .\rds.tf ---

resource "aws_db_instance" "meu_rds" {
  allocated_storage     = 20
  engine                = "mysql"
  engine_version        = "8.0"
  instance_class        = "db.t3.micro"
  db_name               = "MeuMysql" 
  username              = "admin"
  password              = "MinhaSenhaSegura123"
  parameter_group_name  = "default.mysql8.0"
  vpc_security_group_ids = [aws_security_group.rds_sg.id]

  skip_final_snapshot   = true// Medar p/ false garante que o snapshot seja criado antes da deleção
  final_snapshot_identifier = "meu-rds-snapshot-final-${formatdate("YYYYMMDDHHmmss", timestamp())}"

  tags = {
    Name = "MeuRDS"
  }
}


#VPC: vpc-f8709985 

#Availability Zones:
#subnet-db701c96 us-east-1a (use1-az4)
#subnet-e4df06bb us-east-1b (use1-az6)


--- .\sg.tf ---

resource "aws_security_group" "elb_sg" {
  name        = "elb-sg"
  description = "Permite SSH e HTTP"
  vpc_id      = "vpc-f8709985"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "rds_sg" {
  name        = "rds_sg"
  description = "RDS security group"
  vpc_id      = "vpc-f8709985"

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    security_groups = [aws_security_group.elb_sg.id]  // Ajuste aqui
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "RDS Security Group"
  }
}


